#!/usr/bin/env python3


"""
cronic.py

cronic handles cert renewal via cron.

cronic sets the cron job for certbot for a specific time,
Five days before the cert expires.


"""

import datetime
import os
import random
import subprocess
import time


CERTBOT = "certbot"
CRONIC = os.path.realpath(__file__)
CRONTAB = "crontab"
LIST_CRON = [CRONTAB, "-l"]
INSTALL_CRON = [CRONTAB, "-"]
FOUR_HOURS = 14400
ONE_DAY = FOUR_HOURS * 6
DAYS_EARLY = 5
SECONDS_EARLY = DAYS_EARLY * ONE_DAY
DAY_SECONDS = 86400
OPENSSL_CMD = ["openssl", "x509", "-enddate", "-noout", "-in"]
CERT_TIME_FMT = "%b %d %H:%M:%S %Y %Z"
LETS_DIR = "/etc/letsencrypt/live"

# ANSI Color Codes
REV = "\033[7;1m"
NO = "\033[0m"
Y = "\033[93m"


def _renew_cert(cert_pem):
    appt = None
    try:
        certbot = (
            subprocess.run(["which", CERTBOT], capture_output=True, check=True)
            .stdout.decode()
            .replace("\n", "")
        )
        subprocess.run([certbot, "renew"], check=True)
        _, appt = _mk_timestamp_appt(cert_pem)
    except:
        appt = time.gmtime(time.time() + FOUR_HOURS)
        print(f"{Y}{REV}Renewal failed, trying again @ {appt}{NO}")
    return appt


def _mk_cron_appt(appt, cert_pem):
    """
    _mk_cron_appt create the crontab line.
    """
    wday = "*"
    stamp = f" # {cert_pem.replace(LETS_DIR+'/','')} renewal on {time.strftime('%a, %d %b %Y %H:%M:%S', appt)}"
    when= f"\n{appt.tm_min}\t{appt.tm_hour}\t{appt.tm_mday}\t{appt.tm_mon}\t{wday}"
    appt_job =f"{when}\t{CRONIC}{stamp}\n"
    return appt_job.encode()


def _blank_line(job_line):
    """
    _blank_line is the line not blank?
    """
    return len(job_line) != 0


def _cronic_line(job_line):
    """
    _cronic_line is this not the last
    crontab entry by cronic?
    """
    return CRONIC.encode() not in job_line


def _vrfy_cronjob(job_line):
    """
    _vrfy_cronjob verify the line is not
    blank and not the last cronic crontab entry
    """
    vrfy = -1
    vrfy += _blank_line(job_line)
    vrfy += _cronic_line(job_line)
    return vrfy


def _clean_cron():
    """
    _clean_cron remove blank lines and
    the previous cronic crontab entry
    from the crontab.
    """
    cron_list = subprocess.run(LIST_CRON, capture_output=True,check=True)
    cron_jobs = [
        line.replace(b"\n", b"")
        for line in cron_list.stdout.split(b"\n")
        if _vrfy_cronjob(line)
    ]
    return b"\n".join(cron_jobs)


def _install_cron(cron_jobs):
    """
    _install_cron install the new crontab
    """
    added = []
    for pair in cron_jobs:
        appt = pair[0]
        cert_pem = pair[1]
        added.append(_mk_cron_appt(appt, cert_pem))

    with subprocess.Popen(INSTALL_CRON, stdin=subprocess.PIPE) as job:
        add2cron =b"\n".join(added) + b"\n"
        new_cron = _clean_cron() + add2cron
        job.communicate(new_cron)
    subprocess.call(LIST_CRON)


def _cert_not_after(cert_pem):
    """
    _cert_not_after call openssl to read cert.notAfter
    and covert to timestamp
    """
    cmd = OPENSSL_CMD + [cert_pem]
    not_after = (
        subprocess.run(cmd, capture_output=True, check=True)
        .stdout.decode()
        .replace("notAfter=", "")
        .replace("\n", "")
    )
    return datetime.datetime.strptime(not_after, CERT_TIME_FMT).timestamp()


def _random_seconds():
    return random.randint(1, DAY_SECONDS)


def _discover():
    """
    _discover find certs for renewal.
    """
    cert_list = []
    for that in os.listdir(LETS_DIR):
        cp = f"{LETS_DIR}/{that}"
        if os.path.isdir(cp):
            cp = f"{cp}/cert.pem"
            if os.path.isfile(cp):
                print(f"\n{REV}Found {cp}{NO}\n")
                cert_list.append(cp)
    return cert_list


def _mk_timestamp_appt(cert_pem):
    timestamp = _cert_not_after(cert_pem)
    appt = time.gmtime(timestamp - SECONDS_EARLY + _random_seconds())
    return timestamp, appt


def _chk_cert(cert_pem):
    timestamp, appt = _mk_timestamp_appt(cert_pem)
    print(f"{REV}{cert_pem.replace(LETS_DIR+'/','')} expires {time.ctime(timestamp)}\n{NO}")
    days_left = (timestamp - time.time()) / ONE_DAY
    if days_left > DAYS_EARLY:
        print(f"{Y}{REV}{cert_pem.replace(LETS_DIR+'/','')} is not yet ready for renewal.{NO}\n")
        print(
            f"{REV}Setting new cron job for {time.strftime('%a, %d %b %Y %H:%M:%S', appt)}.{NO}\n"
        )
    else:
        appt = _renew_cert(cert_pem)
    return appt


def cronic():
    """
    cronic automates cronjob creation for cert renewal with certbot.
    """
    certs = _discover()
    cron_jobs = []
    for cert_pem in certs:
        appt = _chk_cert(cert_pem)
        cron_jobs.append((appt, cert_pem))
    _install_cron(cron_jobs)


if __name__ == "__main__":
    cronic()
