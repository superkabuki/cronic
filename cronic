#!/usr/bin/env python3
"""
cronic

cronic handles cert renewal via cron.

cronic sets the cron job for certbot for a specific time,
Five days before the cert expires.

Renewing the certificate is useless if you don't restart the
services though.

cronic now restarts services.
"""


import datetime
import os
import random
import re
import subprocess
import sys
import time
from calendar import timegm

HELP = """
cronic

cronic handles cert renewal via cron.

cronic sets the cron job for certbot for a specific time,
Five days before the cert expires.

Renewing the certificate is useless if you don't restart the
services though.

cronic now restarts services.

to have a service restarted after the certificate is renewed,
use the --restart switch with the service command to be
restarted in quotes.
example:

    ./cronic --restart '/usr/sbin/nginx -s reload'

restart commands can be added anytime, whether or not
the certificate is renewed.

restart commands only need to be added once.

the restart command will be run everytime a certificate is renewed.

to remove a restart command:

        crontab -e

delete the line containing the command you wish to remove.
"""


LETS_DIR = "/etc/letsencrypt/live"
AUTOMARK = "# cronic auto-renew"
RESTARTMARK = "# cronic restart"

# commands
CERTBOT = "certbot"
CRONIC = os.path.realpath(__file__)
CRONTAB = "crontab"
LIST_CRON = [CRONTAB, "-l"]
INSTALL_CRON = [CRONTAB, "-"]
OPENSSL_CMD = ["openssl", "x509", "-enddate", "-noout", "-in"]

# Time stuff
DAYS_EARLY = 5
ONE_DAY = 86400
FOUR_HOURS = ONE_DAY / 6
SECONDS_EARLY = DAYS_EARLY * ONE_DAY
CERT_TIME_FMT = "%b %d %H:%M:%S %Y %Z"

# ANSI Color Codes
REV = "\033[7;1m"
NO = "\033[0m"
Y = "\033[93m"


def _renew_cert(cert_pem):
    appt = None
    try:
        certbot = (
            subprocess.run(["which", CERTBOT], capture_output=True, check=True)
            .stdout.decode()
            .replace("\n", "")
        )
        subprocess.run([certbot, "renew"], check=True)
        _, appt = _mk_timestamp_appt(cert_pem)
    except:
        appt = time.gmtime(time.time() + FOUR_HOURS)
        print(f"{Y}{REV}Renewal failed, trying again @ {appt}{NO}")
    return appt


def _mk_cron_appt(appt, cert_pem):
    """
    _mk_cron_appt create the crontab line.
    """
    wday = "*"
    stamp = f" {AUTOMARK} {time.strftime('%d %b %Y %H:%M', appt)}"
    when = f"\n{appt.tm_min}\t{appt.tm_hour}\t{appt.tm_mday}\t{appt.tm_mon}\t{wday}"
    appt_job = f"{when}\t{CRONIC}{stamp}"
    return appt_job.encode()


def _blank_line(job_line):
    """
    _blank_line is the line not blank?
    """
    return len(job_line) != 0


def _cronic_line(job_line):
    """
    _cronic_line is this not the last
    crontab entry by cronic?
    """
    return AUTOMARK.encode() not in job_line and RESTARTMARK.encode() not in job_line


def _vrfy_cronjob(job_line):
    """
    _vrfy_cronjob verify the line is not
    blank and not the last cronic crontab entry
    """
    vrfy = -1
    vrfy += _blank_line(job_line)
    vrfy += _cronic_line(job_line)
    return vrfy


def _get_jobs(cron_list):
    return [
        line  # .replace(b"\n", b"")
        for line in cron_list.stdout.split(b"\n")
        if _vrfy_cronjob(line)
    ]


def _get_list():
    return subprocess.run(LIST_CRON, capture_output=True, check=True)


def _clean_cron():
    """
    _clean_cron remove blank lines and
    the previous cronic crontab entry
    from the crontab.
    """
    cron_list = _get_list()
    cron_jobs = _get_jobs(cron_list)
    return b"\n".join(cron_jobs)


def _soonest_renewal(cron_jobs):
    """
    _soonest_renewal if more than one cert is found,
    set the cron job for the  cert with the soonest renewal date.
    """
    soonest = None
    soon_cert = None
    for pair in cron_jobs:
        appt = pair[0]
        cert_pem = pair[1]
        tg = timegm(appt)
        if not soonest:
            soonest = tg
        if soonest >= tg:
            soonest = tg
            soon_cert = cert_pem
    return _mk_cron_appt(time.gmtime(soonest), soon_cert)


def _install_cron(cron_jobs, restarts):
    """
    _install_cron install the new crontab
    """
    with subprocess.Popen(INSTALL_CRON, stdin=subprocess.PIPE) as job:
        new_cron = _clean_cron() + _soonest_renewal(cron_jobs)
        chunk = b"\n".join(set(restarts))
        new_cron += b"\n"
        new_cron += chunk
        new_cron += b"\n"
        job.communicate(new_cron)
    subprocess.call(LIST_CRON)


def _cert_not_after(cert_pem):
    """
    _cert_not_after call openssl to read cert.notAfter
    and covert to timestamp
    """
    cmd = OPENSSL_CMD + [cert_pem]
    not_after = (
        subprocess.run(cmd, capture_output=True, check=True)
        .stdout.decode()
        .replace("notAfter=", "")
        .replace("\n", "")
    )
    return datetime.datetime.strptime(not_after, CERT_TIME_FMT).timestamp()


def _random_seconds():
    """
    _random_seconds up to one day worth of seconds
    """
    return random.randint(1, ONE_DAY)


def _found_path(that):
    cp = f"{LETS_DIR}/{that}"
    if os.path.isdir(cp):
        cp = f"{cp}/cert.pem"
        if os.path.isfile(cp):
            print(f"\n{REV} Found {cp} {NO}\n")
            return cp
    return False


def _discover():
    """
    _discover find certs for renewal.
    """
    cert_list = []
    for that in os.listdir(LETS_DIR):
        cp = _found_path(that)
        if cp:
            cert_list.append(cp)
    return cert_list


def _mk_timestamp_appt(cert_pem, plus=100):
    """
    _mk_timestamp_appt get the cert notAfter timestamp
    and calculate the appt time for renewal
    """
    timestamp = _cert_not_after(cert_pem)
    appt = time.gmtime(timestamp - SECONDS_EARLY + plus)
    return timestamp, appt


def _chk_cert(cert_pem):
    """
    _chk_cert   determines if the cert needs renewing
    and renews it if needed.
    """
    setjob = " Setting new cron job for "
    notyet = "is not yet ready for renewal. "
    thecert = cert_pem.replace(LETS_DIR + "/", "")
    timestamp, appt = _mk_timestamp_appt(cert_pem)
    jobtime = time.strftime("%a, %d %b %Y %H:%M:%S", appt)
    print(f"\t{REV}{thecert} expires {time.ctime(timestamp)} {NO} \n")
    days_left = (timestamp - time.time()) / ONE_DAY
    if days_left > DAYS_EARLY:
        print(f"\t\t\t{Y}{REV} {thecert} {notyet}{NO} \n")
        print(f"\t{REV} {setjob} {jobtime}.{NO} \n")
    else:
        appt = _renew_cert(cert_pem)
    return appt


def _clean_up_restarts(restarts):
    restarts = [re.sub(r"\s+", " ", line.decode()).strip() for line in restarts]
    restarts = [line.split(" ", 5)[-1].split("#")[0] for line in restarts]
    restarts += _cli_restarts()
    return list(set(restarts))


def _get_restarts():
    cron_list = subprocess.run(LIST_CRON, capture_output=True)
    restarts = [
        line.replace(b"\n", b"")
        for line in cron_list.stdout.split(b"\n")
        if RESTARTMARK.encode() in line
    ]
    return _clean_up_restarts(restarts)


def _cli_restarts():
    restarts = []
    for idx, arg in enumerate(sys.argv):
        if arg in ["--restart"]:
            restarts.append(sys.argv[idx + 1])
    return restarts


def _mk_restart(restart, appt):
    wday = "*"
    when = f"{appt.tm_min}\t{appt.tm_hour}\t{appt.tm_mday}\t{appt.tm_mon}\t{wday}"
    reappt_job = f"{when}\t{restart} {RESTARTMARK}"
    return reappt_job.encode()


def helpme():
    """
    helpme print help message.

    """
    help_words = [
        "-h",
        "--h",
        "--help",
        "-help",
        "help",
    ]
    if [h for h in help_words if h in sys.argv]:
            print(HELP)
            sys.exit()


def cronic():
    """
    cronic automates cronjob creation for cert renewal with certbot.
    """
    helpme()
    certs = _discover()
    cron_jobs = []
    restart_jobs = []
    for cert_pem in certs:
        appt = _chk_cert(cert_pem)
        cron_jobs.append((appt, cert_pem))
        tstamp, reappt = _mk_timestamp_appt(cert_pem, plus=170)
        restarts = _get_restarts()
        restarts = [word.strip() for word in restarts]
        restart_jobs += [_mk_restart(res, reappt) for res in restarts]
        restart_jobs = list(set(restart_jobs))
    _install_cron(cron_jobs, restart_jobs)


if __name__ == "__main__":
    cronic()
